{"name":"Dropbox Client for ImageJ","tagline":"Google Summer of Code 2014 - International Neuroinformatics Coordinating Facility (INCF, Belgian Node)","body":"![](https://dl.dropboxusercontent.com/u/52328771/Atin%20GSoC%20proposal/GSoC-incf-2014.png)\r\n\r\n# [Dropbox Client for ImageJ](https://www.google-melange.com/gsoc/project/details/google/gsoc2014/atin007/5685265389584384)\r\n\r\n**This project is sponsored by Google Inc. as a part of Google Summer of Code 2014 program. **\r\n\r\nDetails of this project are:\r\n\r\n1. **Organization:**\t[International Neuroinformatics Coordinating Facility (INCF)](http://incf.org)\r\n2. **Mentor:**\tDimiter Prodanov, [INCF Belgian Node](http://www.neuroinformatics.be)\r\n3. **Student Developer:**\tAtin Mathur (mathuratin007@gmail.com)\r\n4. **Working Period:**\tMay - August, 2014\r\n5. **Public Repository:**\t[http://github.com/INCF/dbclient](http://github.com/INCF/dbclient)\r\n\r\n## [ImageJ](http://imagej.nih.gov/ij/)\r\n\r\n![](https://dl.dropboxusercontent.com/u/52328771/Atin%20GSoC%20proposal/imageJ.jpg)\r\n\r\nImageJ is a public domain Java image processing program inspired by NIH Image for the Macintosh. It runs, either as an online applet or as a downloadable application, on any computer with a Java 1.4 or later virtual machine. [Downloadable distributions](http://rsbweb.nih.gov/ij/download.html) are available for Windows, Mac OS, Mac OS X and Linux.\r\n\r\nIt can display, edit, analyze, process, save and print 8-bit, 16-bit and 32-bit images. It can read many image formats including TIFF, GIF, JPEG, BMP, DICOM, FITS and \"raw\". It supports \"stacks\", a series of images that share a single window. It is multithreaded, so time-consuming operations such as image file reading can be performed in parallel with other operations.\r\n\r\nImageJ was designed with an open architecture that provides extensibility via Java plugins. Custom acquisition, analysis and processing plugins can be developed using ImageJ's built in editor and Java compiler. User-written plugins make it possible to solve almost any image processing or analysis problem. It is now being used in vast number of imaging applications ranging from skin analysis to neuroscience.\r\n\r\n## Project Proposal\r\n\r\nOur project aims at developing an ImageJ plugin which will provide users with a Graphical user interface (GUI) to upload and download datasets (images, docs, folders, codes etc.) from their Dropbox accounts (using Dropbox Core APIs for Java) and open it directly into ImageJ. My project Proposal can be found [here](https://dl.dropboxusercontent.com/u/52328771/Atin%20GSoC%20proposal/Atin%20Mathur_gsoc_incf-proposal.pdf).\r\n\r\n\r\n## Project Milestones\r\n\r\n**In this section, I will describe how I developed this project.**\r\n\r\n### Step 1\t:\tRead Dropbox Core APIs for Java  and ImageJ Basics. (Week 1)\r\n\r\nThe Dropbox Core APIs provides a flexible way to read and write to Dropbox. It includes support for advanced functionality like search, revisions, and restoring files. The Core API is based on HTTP and OAuth and provides low-level calls to access and manipulate a user's Dropbox account.\r\n\r\nTo make things as easy as possible, dropbox has provided several platform SDKs which can be imported into any development  environment. The SDKs contain platform-specific libraries that wrap the raw HTTP calls to the Dropbox API.\r\n\r\nI read the complete documentation of Dropbox Core APIs from [here](http://dropbox.github.io/dropbox-sdk-java/api-docs/v1.7.x/com/dropbox/core/DbxClient.html). It is quite simple and informative.\r\n\r\n### Step 2\t:\tWrote a sample program to use Dropbox API to access/upload/download from my Dropbox account. (Week 1)\r\n\r\n### Step 3\t:\tConfigured ImageJ with Eclipse and created a plugin that could connect to a user's Dropbox account. (Week 2)\r\n\r\n### Step 4\t:\tAdded the download/upload functionality in the ImageJ plugin. (Week 3, 4)\r\n\r\n### Step 5\t:\tImproved the Graphical User Interface of the plugin. (Week 5, 6)\r\n\r\n#### Midterm Evaluation\r\n\r\n### Step 6\t:\tAdded JTree for browsing Dropbox folders remotely. (Week 8, 9)\r\n\r\n### Step 7\t:\t Changed the GUI quite a bit and added the open the file after upload/download functionality. (Week 10)\r\n\r\n### Step 8\t:\tTesting the code and handling exceptions wherever needed. (Week 11, 12)\r\n\r\n### Step 9\t:\tChanged the open in OS-Default application to ImageJ and Created a new thread for downloading/uploading. (Week 13)\r\n\r\n\r\n## How to use this plugin\r\n\r\n\r\n## Project Directory Structure","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}